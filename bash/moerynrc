# {{{ Useful options
# {{{ ASAN

if type llvm-symbolizer &> /dev/null; then
    export ASAN_SYMBOLIZER_PATH="$(which llvm-symbolizer)"
fi
export ASAN_OPTIONS=abort_on_error=1:detect_leaks=1
export LSAN_OPTIONS=use_stacks=0:use_registers=0:use_globals=1:use_tls=1
export HISTSIZE=10000

# }}}
# {{{ Others

# Enable all cores generation
ulimit -c unlimited

# Disable Caps lock to Escape
xmodmap -e 'clear Lock' -e 'keycode 0x42 = Escape'

# }}}
# }}}
# {{{ Functions
# {{{ Find a random bug in a test suite

function randbug()
{
    local i=0
    local filepath="/tmp/randbug"

    echo -e "starting rand bug procedure"
    while true; do
        local start_timer=$(date +%s.%N)
        local duration=""

        i=$((i+1))

        $@ &> $filepath
        if [ $? -ne 0 ]; then
            cat $filepath
            echo -e "bug found during the $i execution"
            echo -e "bug report dump in $filepath"
            break
        fi

        duration=`echo "($(date +%s.%N) - $start_timer)*1000" | bc \
                | awk '{printf "%.2f\n", $0}'`
        echo -e "Execution: $i elapsed: $duration  ms"
    done
}

# }}}
# {{{ Build FlameGraph

function flame_help()
{
    echo -e "FlameGraph helper"
    echo -e "-----------------"
    echo -e "usage: flameit [filename prefix] | [-h cpu]"
    echo -e ""

    if [ -z $1 ]; then
        echo -e "   -h      show this help"
        echo -e "   -h cpu  show the tutorial on how to generate the data"
        echo -e "           for the CPU"
        return
    fi

    if [[ "$1" == "cpu" ]]; then
        echo -e "   Generate CPU data"
        echo -e "   -----------------"
        echo -e ""
        echo -e "   perf record -g ./program"
        echo -e "   the symbol of program must exist"
        return
    fi
}

function flameit()
{
    local filename=""

    if [ -z $1 ]; then
        filename="flamegraph"
    elif [[ "$1" == "-h" ]]; then
        flame_help $2
        return
    else
        filename=$1
    fi

    filename+="-`date +'%d%m-%H%M%S'`.svg"

    echo -e "generating flamegraph $filename..."

    perf script | ~/CONFIG/tools/FlameGraph/stackcollapse-perf.pl \
                | ~/CONFIG/tools/FlameGraph/flamegraph.pl         \
                > $filename

    if [ $? -ne 0 ]; then
        return
    fi

    echo -e "generation done."
    while true; do
        if [[ $ZSH_NAME == "zsh" ]]; then
            read "yn?Open in google-chrome the flame graph? y/n"
        else
            read -p "Open in google-chrome the flame graph? y/n" yn
        fi
        case $yn in
            [Yy]* ) google-chrome $filename; break;;
            [Nn]* ) return;;
            * ) echo "Please answer y or n.";;
        esac
    done
}

# }}}
# {{{ Remove all swp and swo files recursively

function vimclean()
{
    find . -name ".*.swp" -type f -delete
    find . -name ".*.swo" -type f -delete
    find . -name ".*.swn" -type f -delete
}

# }}}

if [[ $ZSH_NAME != "zsh" ]]; then
    export -f flameit
    export -f randbug
    export -f vimclean
fi

# }}}
# {{{ Aliases

if [ "$TERM" != "dumb" ]; then
    eval `dircolors -b`
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

alias myls=' ls -C -F -h '
alias l=" myls -l"
alias ll=' myls -l'
alias la=' myls -lA'
alias v=" clear; ll -gh"    # standard directory view
alias vs=" v **/*(.)"       # show all files in all subdirs plain in a list

# }}}

RTAGS_DEST=~/CONFIG/tools/rtags/bin
if [ -d "`echo ${RTAGS_DEST//>}`" ]; then
  export PATH=~/CONFIG/tools/rtags/bin:$PATH
fi

FLAMEGRAPH_TOOLS=~/CONFIG/tools/FlameGraph/
if [ -d "`echo ${FLAMEGRAPH_TOOLS//>}`" ]; then
  export PATH=~/CONFIG/tools/FlameGraph/:$PATH
fi

# vim: syn=sh
